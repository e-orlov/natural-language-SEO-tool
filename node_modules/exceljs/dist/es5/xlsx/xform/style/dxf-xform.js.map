{"version":3,"sources":["../../../../../lib/xlsx/xform/style/dxf-xform.js"],"names":["BaseXform","require","AlignmentXform","BorderXform","FillXform","FontXform","NumFmtXform","DxfXform","map","alignment","border","fill","font","numFmt","xmlStream","model","openNode","tag","render","closeNode","node","parser","parseOpen","name","text","parseText","parseClose","undefined","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\n\nconst AlignmentXform = require('./alignment-xform');\nconst BorderXform = require('./border-xform');\nconst FillXform = require('./fill-xform');\nconst FontXform = require('./font-xform');\nconst NumFmtXform = require('./numfmt-xform');\n\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\n//   Optional <alignment>\n// </xf>\n\n// Style assists translation from style model to/from xlsx\nclass DxfXform extends BaseXform {\n  constructor() {\n    super();\n\n    this.map = {\n      alignment: new AlignmentXform(),\n      border: new BorderXform(),\n      fill: new FillXform(),\n      font: new FontXform(),\n      numFmt: new NumFmtXform(),\n    };\n  }\n\n  get tag() {\n    return 'dxf';\n  }\n\n  // how do we generate dxfid?\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag);\n\n    if (model.alignment) {\n      this.map.alignment.render(xmlStream, model.alignment);\n    }\n    if (model.border) {\n      this.map.border.render(xmlStream, model.border);\n    }\n    if (model.fill) {\n      this.map.fill.render(xmlStream, model.fill);\n    }\n    if (model.font) {\n      this.map.font.render(xmlStream, model.font);\n    }\n    if (model.numFmt) {\n      this.map.numFmt.render(xmlStream, model.numFmt);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case this.tag:\n        return true;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        return true;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n    if (name === this.tag) {\n      this.model = {\n        alignment: this.map.alignment.model,\n        border: this.map.border.model,\n        fill: this.map.fill.model,\n        font: this.map.font.model,\n        numFmt: this.map.numFmt.model,\n      };\n      return false;\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = DxfXform;\n"],"file":"dxf-xform.js"}