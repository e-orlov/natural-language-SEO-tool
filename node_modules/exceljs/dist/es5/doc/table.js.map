{"version":3,"sources":["../../../lib/doc/table.js"],"names":["colCache","require","Table","worksheet","table","validate","store","column","totalsRowFunction","name","totalsRowFormula","Error","assign","o","dflt","undefined","style","assert","test","message","ref","columns","rows","tl","decodeAddress","row","col","width","length","height","filterHeight","headerRow","tableHeight","totalsRow","autoFilterRef","encode","tableRef","forEach","i","getFormula","assignStyle","cell","Object","keys","key","count","r","getRow","j","getCell","value","data","totalsRowLabel","formula","result","totalsRowResult","_cache","values","rowNumber","cacheState","colNumber","target","prop","displyName","displayName","showFirstColumn","showLastColumn","showRowStripes","showColumnStripes","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;IAEMC,K;;;AACJ,iBAAYC,SAAZ,EAAuBC,KAAvB,EAA8B;AAAA;;AAC5B,SAAKD,SAAL,GAAiBA,SAAjB;;AACA,QAAIC,KAAJ,EAAW;AACT,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKC,QAAL;AACA,WAAKC,KAAL;AACD;AACF;;;;+BAEUC,M,EAAQ;AACjB;AACA,cAAQA,MAAM,CAACC,iBAAf;AACE,aAAK,MAAL;AAAa,iBAAO,IAAP;;AACb,aAAK,SAAL;AAAgB,wCAAuB,KAAKJ,KAAL,CAAWK,IAAlC,cAA0CF,MAAM,CAACE,IAAjD;;AAChB,aAAK,WAAL;AAAkB,wCAAuB,KAAKL,KAAL,CAAWK,IAAlC,cAA0CF,MAAM,CAACE,IAAjD;;AAClB,aAAK,OAAL;AAAc,wCAAuB,KAAKL,KAAL,CAAWK,IAAlC,cAA0CF,MAAM,CAACE,IAAjD;;AACd,aAAK,KAAL;AAAY,wCAAuB,KAAKL,KAAL,CAAWK,IAAlC,cAA0CF,MAAM,CAACE,IAAjD;;AACZ,aAAK,KAAL;AAAY,wCAAuB,KAAKL,KAAL,CAAWK,IAAlC,cAA0CF,MAAM,CAACE,IAAjD;;AACZ,aAAK,QAAL;AAAe,wCAAuB,KAAKL,KAAL,CAAWK,IAAlC,cAA0CF,MAAM,CAACE,IAAjD;;AACf,aAAK,KAAL;AAAY,wCAAuB,KAAKL,KAAL,CAAWK,IAAlC,cAA0CF,MAAM,CAACE,IAAjD;;AACZ,aAAK,QAAL;AAAe,iBAAOF,MAAM,CAACG,gBAAd;;AACf;AACE,gBAAM,IAAIC,KAAJ,wCAA0CJ,MAAM,CAACC,iBAAjD,EAAN;AAXJ;AAaD;;;+BAEU;AAAA;;AAAA,UACFJ,KADE,GACO,IADP,CACFA,KADE,EAET;;AACA,UAAMQ,MAAM,GAAG,SAATA,MAAS,CAACC,CAAD,EAAIJ,IAAJ,EAAUK,IAAV,EAAmB;AAChC,YAAID,CAAC,CAACJ,IAAD,CAAD,KAAYM,SAAhB,EAA2B;AACzBF,UAAAA,CAAC,CAACJ,IAAD,CAAD,GAAUK,IAAV;AACD;AACF,OAJD;;AAKAF,MAAAA,MAAM,CAACR,KAAD,EAAQ,WAAR,EAAqB,IAArB,CAAN;AACAQ,MAAAA,MAAM,CAACR,KAAD,EAAQ,WAAR,EAAqB,KAArB,CAAN;AAEAQ,MAAAA,MAAM,CAACR,KAAD,EAAQ,OAAR,EAAiB,EAAjB,CAAN;AACAQ,MAAAA,MAAM,CAACR,KAAK,CAACY,KAAP,EAAc,OAAd,EAAuB,mBAAvB,CAAN;AACAJ,MAAAA,MAAM,CAACR,KAAK,CAACY,KAAP,EAAc,iBAAd,EAAiC,KAAjC,CAAN;AACAJ,MAAAA,MAAM,CAACR,KAAK,CAACY,KAAP,EAAc,gBAAd,EAAgC,KAAhC,CAAN;AACAJ,MAAAA,MAAM,CAACR,KAAK,CAACY,KAAP,EAAc,gBAAd,EAAgC,KAAhC,CAAN;AACAJ,MAAAA,MAAM,CAACR,KAAK,CAACY,KAAP,EAAc,mBAAd,EAAmC,KAAnC,CAAN;;AAEA,UAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,OAAP,EAAmB;AAChC,YAAI,CAACD,IAAL,EAAW;AACT,gBAAM,IAAIP,KAAJ,CAAUQ,OAAV,CAAN;AACD;AACF,OAJD;;AAKAF,MAAAA,MAAM,CAACb,KAAK,CAACgB,GAAP,EAAY,qBAAZ,CAAN;AACAH,MAAAA,MAAM,CAACb,KAAK,CAACiB,OAAP,EAAgB,oCAAhB,CAAN;AACAJ,MAAAA,MAAM,CAACb,KAAK,CAACkB,IAAP,EAAa,iCAAb,CAAN;AAEAlB,MAAAA,KAAK,CAACmB,EAAN,GAAWvB,QAAQ,CAACwB,aAAT,CAAuBpB,KAAK,CAACgB,GAA7B,CAAX;AA3BS,sBA4BUhB,KAAK,CAACmB,EA5BhB;AAAA,UA4BFE,GA5BE,aA4BFA,GA5BE;AAAA,UA4BGC,GA5BH,aA4BGA,GA5BH;AA6BTT,MAAAA,MAAM,CAACQ,GAAG,GAAG,CAAP,EAAU,4BAAV,CAAN;AACAR,MAAAA,MAAM,CAACS,GAAG,GAAG,CAAP,EAAU,4BAAV,CAAN;AAEA,UAAMC,KAAK,GAAGvB,KAAK,CAACiB,OAAN,CAAcO,MAA5B;AACA,UAAMC,MAAM,GAAGzB,KAAK,CAACkB,IAAN,CAAWM,MAA1B;AACA,UAAME,YAAY,GAAGD,MAAM,IAAIzB,KAAK,CAAC2B,SAAN,GAAkB,CAAlB,GAAsB,CAA1B,CAA3B;AACA,UAAMC,WAAW,GAAGF,YAAY,IAAI1B,KAAK,CAAC6B,SAAN,GAAkB,CAAlB,GAAsB,CAA1B,CAAhC,CAnCS,CAqCT;;AACA7B,MAAAA,KAAK,CAAC8B,aAAN,GAAsBlC,QAAQ,CAACmC,MAAT,CACpBV,GADoB,EAEpBC,GAFoB,EAGpBD,GAAG,GAAGK,YAAN,GAAqB,CAHD,EAIpBJ,GAAG,GAAGC,KAAN,GAAc,CAJM,CAAtB,CAtCS,CA6CT;;AACAvB,MAAAA,KAAK,CAACgC,QAAN,GAAiBpC,QAAQ,CAACmC,MAAT,CACfV,GADe,EAEfC,GAFe,EAGfD,GAAG,GAAGO,WAAN,GAAoB,CAHL,EAIfN,GAAG,GAAGC,KAAN,GAAc,CAJC,CAAjB;AAOAvB,MAAAA,KAAK,CAACiB,OAAN,CAAcgB,OAAd,CAAsB,UAAC9B,MAAD,EAAS+B,CAAT,EAAe;AACnCrB,QAAAA,MAAM,CAACV,MAAM,CAACE,IAAR,mBAAwB6B,CAAxB,uBAAN;;AACA,YAAIA,CAAC,KAAK,CAAV,EAAa;AACX1B,UAAAA,MAAM,CAACL,MAAD,EAAS,gBAAT,EAA2B,OAA3B,CAAN;AACD,SAFD,MAEO;AACLK,UAAAA,MAAM,CAACL,MAAD,EAAS,mBAAT,EAA8B,MAA9B,CAAN;AACAA,UAAAA,MAAM,CAACG,gBAAP,GAA0B,KAAI,CAAC6B,UAAL,CAAgBhC,MAAhB,CAA1B;AACD;AACF,OARD;AASD;;;4BAEO;AAAA;;AACN;AACA;AACA,UAAMiC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOzB,KAAP,EAAiB;AACnC,YAAIA,KAAJ,EAAW;AACT0B,UAAAA,MAAM,CAACC,IAAP,CAAY3B,KAAZ,EAAmBqB,OAAnB,CAA2B,UAAAO,GAAG,EAAI;AAChCH,YAAAA,IAAI,CAACG,GAAD,CAAJ,GAAY5B,KAAK,CAAC4B,GAAD,CAAjB;AACD,WAFD;AAGD;AACF,OAND;;AAHM,UAWCzC,SAXD,GAWqB,IAXrB,CAWCA,SAXD;AAAA,UAWYC,KAXZ,GAWqB,IAXrB,CAWYA,KAXZ;AAAA,uBAYaA,KAAK,CAACmB,EAZnB;AAAA,UAYCE,GAZD,cAYCA,GAZD;AAAA,UAYMC,GAZN,cAYMA,GAZN;AAaN,UAAImB,KAAK,GAAG,CAAZ;;AACA,UAAIzC,KAAK,CAAC2B,SAAV,EAAqB;AACnB,YAAMe,CAAC,GAAG3C,SAAS,CAAC4C,MAAV,CAAiBtB,GAAG,GAAGoB,KAAK,EAA5B,CAAV;AACAzC,QAAAA,KAAK,CAACiB,OAAN,CAAcgB,OAAd,CAAsB,UAAC9B,MAAD,EAASyC,CAAT,EAAe;AAAA,cAC5BhC,KAD4B,GACbT,MADa,CAC5BS,KAD4B;AAAA,cACrBP,IADqB,GACbF,MADa,CACrBE,IADqB;AAEnC,cAAMgC,IAAI,GAAGK,CAAC,CAACG,OAAF,CAAUvB,GAAG,GAAGsB,CAAhB,CAAb;AACAP,UAAAA,IAAI,CAACS,KAAL,GAAazC,IAAb;AACA+B,UAAAA,WAAW,CAACC,IAAD,EAAOzB,KAAP,CAAX;AACD,SALD;AAMD;;AACDZ,MAAAA,KAAK,CAACkB,IAAN,CAAWe,OAAX,CAAmB,UAAAc,IAAI,EAAI;AACzB,YAAML,CAAC,GAAG3C,SAAS,CAAC4C,MAAV,CAAiBtB,GAAG,GAAGoB,KAAK,EAA5B,CAAV;AACAM,QAAAA,IAAI,CAACd,OAAL,CAAa,UAACa,KAAD,EAAQF,CAAR,EAAc;AACzB,cAAMP,IAAI,GAAGK,CAAC,CAACG,OAAF,CAAUvB,GAAG,GAAGsB,CAAhB,CAAb;AACAP,UAAAA,IAAI,CAACS,KAAL,GAAaA,KAAb;AAEAV,UAAAA,WAAW,CAACC,IAAD,EAAOrC,KAAK,CAACiB,OAAN,CAAc2B,CAAd,EAAiBhC,KAAxB,CAAX;AACD,SALD;AAMD,OARD;;AAUA,UAAIZ,KAAK,CAAC6B,SAAV,EAAqB;AACnB,YAAMa,EAAC,GAAG3C,SAAS,CAAC4C,MAAV,CAAiBtB,GAAG,GAAGoB,KAAK,EAA5B,CAAV;;AACAzC,QAAAA,KAAK,CAACiB,OAAN,CAAcgB,OAAd,CAAsB,UAAC9B,MAAD,EAASyC,CAAT,EAAe;AACnC,cAAMP,IAAI,GAAGK,EAAC,CAACG,OAAF,CAAUvB,GAAG,GAAGsB,CAAhB,CAAb;;AACA,cAAIA,CAAC,KAAK,CAAV,EAAa;AACXP,YAAAA,IAAI,CAACS,KAAL,GAAa3C,MAAM,CAAC6C,cAApB;AACD,WAFD,MAEO;AACL,gBAAMC,OAAO,GAAG,MAAI,CAACd,UAAL,CAAgBhC,MAAhB,CAAhB;;AACA,gBAAI8C,OAAJ,EAAa;AACXZ,cAAAA,IAAI,CAACS,KAAL,GAAa;AACXG,gBAAAA,OAAO,EAAE9C,MAAM,CAACG,gBADL;AAEX4C,gBAAAA,MAAM,EAAE/C,MAAM,CAACgD;AAFJ,eAAb;AAID;AACF;;AAEDf,UAAAA,WAAW,CAACC,IAAD,EAAOlC,MAAM,CAACS,KAAd,CAAX;AACD,SAfD;AAgBD;AACF;;;yBAEIb,S,EAAW;AAAA;;AACd;AADc,UAEPC,KAFO,GAEE,IAFF,CAEPA,KAFO;AAAA,uBAGKA,KAAK,CAACmB,EAHX;AAAA,UAGPE,GAHO,cAGPA,GAHO;AAAA,UAGFC,GAHE,cAGFA,GAHE;AAId,UAAImB,KAAK,GAAG,CAAZ;;AACA,UAAIzC,KAAK,CAAC2B,SAAV,EAAqB;AACnB,YAAMe,CAAC,GAAG3C,SAAS,CAAC4C,MAAV,CAAiBtB,GAAG,GAAGoB,KAAK,EAA5B,CAAV;AACAzC,QAAAA,KAAK,CAACiB,OAAN,CAAcgB,OAAd,CAAsB,UAAC9B,MAAD,EAASyC,CAAT,EAAe;AACnC,cAAMP,IAAI,GAAGK,CAAC,CAACG,OAAF,CAAUvB,GAAG,GAAGsB,CAAhB,CAAb;AACAP,UAAAA,IAAI,CAACS,KAAL,GAAa3C,MAAM,CAACE,IAApB;AACD,SAHD;AAID;;AACDL,MAAAA,KAAK,CAACkB,IAAN,CAAWe,OAAX,CAAmB,UAAAc,IAAI,EAAI;AACzB,YAAML,CAAC,GAAG3C,SAAS,CAAC4C,MAAV,CAAiBtB,GAAG,GAAGoB,KAAK,EAA5B,CAAV;AACAM,QAAAA,IAAI,CAACd,OAAL,CAAa,UAACa,KAAD,EAAQF,CAAR,EAAc;AACzB,cAAMP,IAAI,GAAGK,CAAC,CAACG,OAAF,CAAUvB,GAAG,GAAGsB,CAAhB,CAAb;AACAP,UAAAA,IAAI,CAACS,KAAL,GAAaA,KAAb;AACD,SAHD;AAID,OAND;;AAQA,UAAI9C,KAAK,CAAC6B,SAAV,EAAqB;AACnB,YAAMa,GAAC,GAAG3C,SAAS,CAAC4C,MAAV,CAAiBtB,GAAG,GAAGoB,KAAK,EAA5B,CAAV;;AACAzC,QAAAA,KAAK,CAACiB,OAAN,CAAcgB,OAAd,CAAsB,UAAC9B,MAAD,EAASyC,CAAT,EAAe;AACnC,cAAMP,IAAI,GAAGK,GAAC,CAACG,OAAF,CAAUvB,GAAG,GAAGsB,CAAhB,CAAb;;AACA,cAAIA,CAAC,KAAK,CAAV,EAAa;AACXP,YAAAA,IAAI,CAACS,KAAL,GAAa3C,MAAM,CAAC6C,cAApB;AACD,WAFD,MAEO;AACL,gBAAMC,OAAO,GAAG,MAAI,CAACd,UAAL,CAAgBhC,MAAhB,CAAhB;;AACA,gBAAI8C,OAAJ,EAAa;AACXZ,cAAAA,IAAI,CAACS,KAAL,GAAa;AACXG,gBAAAA,OAAO,EAAE9C,MAAM,CAACG,gBADL;AAEX4C,gBAAAA,MAAM,EAAE/C,MAAM,CAACgD;AAFJ,eAAb;AAID;AACF;AACF,SAbD;AAcD;AACF;;;AAUD;AACA;iCACa;AACX,UAAI,CAAC,KAAKC,MAAV,EAAkB;AAChB,aAAKA,MAAL,GAAc;AACZpC,UAAAA,GAAG,EAAE,KAAKA;AADE,SAAd;AAGD;AACF;AAED;;;;2BACOqC,M,EAAQC,S,EAAW;AACxB;AACA,WAAKC,UAAL;AACD;;;8BAESD,S,EAAW;AACnB;AACA,WAAKC,UAAL;AACD;;;8BAESpD,M,EAAQkD,M,EAAQG,S,EAAW;AACnC;AACA;AACA,WAAKD,UAAL;AACD;;;iCAEYC,S,EAAW;AACtB;AACA,WAAKD,UAAL;AACD;;;2BAEME,M,EAAQC,I,EAAMZ,K,EAAO;AAC1B,WAAKS,UAAL;AACAE,MAAAA,MAAM,CAACC,IAAD,CAAN,GAAeZ,KAAf;AACD;AAED;;;;wBA7CY;AACV,aAAO,KAAK9C,KAAZ;AACD,K;sBAES8C,K,EAAO;AACf,WAAK9C,KAAL,GAAa8C,KAAb;AACD;;;wBAwCS;AAAE,aAAO,KAAK9C,KAAL,CAAWgB,GAAlB;AAAwB,K;sBAC5B8B,K,EAAO;AAAE,WAAKtC,MAAL,CAAY,KAAKR,KAAjB,EAAwB,KAAxB,EAA+B8C,KAA/B;AAAwC;;;wBAE9C;AAAE,aAAO,KAAK9C,KAAL,CAAWK,IAAlB;AAAyB,K;sBAC7ByC,K,EAAO;AAAE,WAAK9C,KAAL,CAAWK,IAAX,GAAkByC,KAAlB;AAA0B;;;wBAE1B;AAAE,aAAO,KAAK9C,KAAL,CAAW2D,UAAX,IAAyB,KAAK3D,KAAL,CAAWK,IAA3C;AAAkD;;;sBAClDyC,K,EAAO;AAAE,WAAK9C,KAAL,CAAW4D,WAAX,GAAyBd,KAAzB;AAAiC;;;wBAE9C;AAAE,aAAO,KAAK9C,KAAL,CAAW2B,SAAlB;AAA8B,K;sBAClCmB,K,EAAO;AAAE,WAAKtC,MAAL,CAAY,KAAKR,KAAjB,EAAwB,WAAxB,EAAqC8C,KAArC;AAA8C;;;wBAErD;AAAE,aAAO,KAAK9C,KAAL,CAAW6B,SAAlB;AAA8B,K;sBAClCiB,K,EAAO;AAAE,WAAKtC,MAAL,CAAY,KAAKR,KAAjB,EAAwB,WAAxB,EAAqC8C,KAArC;AAA8C;;;wBAEzD;AAAE,aAAO,KAAK9C,KAAL,CAAWY,KAAX,CAAiBP,IAAxB;AAA+B,K;sBACnCyC,K,EAAO;AAAE,WAAK9C,KAAL,CAAWY,KAAX,CAAiBP,IAAjB,GAAwByC,KAAxB;AAAgC;;;wBAE7B;AAAE,aAAO,KAAK9C,KAAL,CAAWY,KAAX,CAAiBiD,eAAxB;AAA0C,K;sBAC9Cf,K,EAAO;AAAE,WAAK9C,KAAL,CAAWY,KAAX,CAAiBiD,eAAjB,GAAmCf,KAAnC;AAA2C;;;wBAEnD;AAAE,aAAO,KAAK9C,KAAL,CAAWY,KAAX,CAAiBkD,cAAxB;AAAyC,K;sBAC7ChB,K,EAAO;AAAE,WAAK9C,KAAL,CAAWY,KAAX,CAAiBkD,cAAjB,GAAkChB,KAAlC;AAA0C;;;wBAEjD;AAAE,aAAO,KAAK9C,KAAL,CAAWY,KAAX,CAAiBmD,cAAxB;AAAyC,K;sBAC7CjB,K,EAAO;AAAE,WAAK9C,KAAL,CAAWY,KAAX,CAAiBmD,cAAjB,GAAkCjB,KAAlC;AAA0C;;;wBAE9C;AAAE,aAAO,KAAK9C,KAAL,CAAWY,KAAX,CAAiBoD,iBAAxB;AAA4C,K;sBAChDlB,K,EAAO;AAAE,WAAK9C,KAAL,CAAWY,KAAX,CAAiBoD,iBAAjB,GAAqClB,KAArC;AAA6C;;;;;;AAI9EmB,MAAM,CAACC,OAAP,GAAiBpE,KAAjB","sourcesContent":["const colCache = require('./../utils/col-cache');\n\nclass Table {\n  constructor(worksheet, table) {\n    this.worksheet = worksheet;\n    if (table) {\n      this.table = table;\n      this.validate();\n      this.store();\n    }\n  }\n\n  getFormula(column) {\n    // get the correct formula to apply to the totals row\n    switch (column.totalsRowFunction) {\n      case 'none': return null;\n      case 'average': return `SUBTOTAL(101,${this.table.name}[${column.name}])`;\n      case 'countNums': return `SUBTOTAL(102,${this.table.name}[${column.name}])`;\n      case 'count': return `SUBTOTAL(103,${this.table.name}[${column.name}])`;\n      case 'max': return `SUBTOTAL(104,${this.table.name}[${column.name}])`;\n      case 'min': return `SUBTOTAL(105,${this.table.name}[${column.name}])`;\n      case 'stdDev': return `SUBTOTAL(106,${this.table.name}[${column.name}])`;\n      case 'var': return `SUBTOTAL(107,${this.table.name}[${column.name}])`;\n      case 'custom': return column.totalsRowFormula;\n      default:\n        throw new Error(`Invalid Totals Row Function: ${column.totalsRowFunction}`);\n    }\n  }\n\n  validate() {\n    const {table} = this;\n    // set defaults and check is valid\n    const assign = (o, name, dflt) => {\n      if (o[name] === undefined) {\n        o[name] = dflt;\n      }\n    };\n    assign(table, 'headerRow', true);\n    assign(table, 'totalsRow', false);\n\n    assign(table, 'style', {});\n    assign(table.style, 'theme', 'TableStyleMedium2');\n    assign(table.style, 'showFirstColumn', false);\n    assign(table.style, 'showLastColumn', false);\n    assign(table.style, 'showRowStripes', false);\n    assign(table.style, 'showColumnStripes', false);\n\n    const assert = (test, message) => {\n      if (!test) {\n        throw new Error(message);\n      }\n    };\n    assert(table.ref, 'Table must have ref');\n    assert(table.columns, 'Table must have column definitions');\n    assert(table.rows, 'Table must have row definitions');\n\n    table.tl = colCache.decodeAddress(table.ref);\n    const {row, col} = table.tl;\n    assert(row > 0, 'Table must be on valid row');\n    assert(col > 0, 'Table must be on valid col');\n\n    const width = table.columns.length;\n    const height = table.rows.length;\n    const filterHeight = height + (table.headerRow ? 1 : 0);\n    const tableHeight = filterHeight + (table.totalsRow ? 1 : 0);\n\n    // autoFilterRef is a range that includes optional headers only\n    table.autoFilterRef = colCache.encode(\n      row,\n      col,\n      row + filterHeight - 1,\n      col + width - 1\n    );\n\n    // tableRef is a range that includes optional headers and totals\n    table.tableRef = colCache.encode(\n      row,\n      col,\n      row + tableHeight - 1,\n      col + width - 1\n    );\n\n    table.columns.forEach((column, i) => {\n      assert(column.name, `Column ${i} must have a name`);\n      if (i === 0) {\n        assign(column, 'totalsRowLabel', 'Total');\n      } else {\n        assign(column, 'totalsRowFunction', 'none');\n        column.totalsRowFormula = this.getFormula(column);\n      }\n    });\n  }\n\n  store() {\n    // where the table needs to store table data, headers, footers in\n    // the sheet...\n    const assignStyle = (cell, style) => {\n      if (style) {\n        Object.keys(style).forEach(key => {\n          cell[key] = style[key];\n        });\n      }\n    };\n\n    const {worksheet, table} = this;\n    const {row, col} = table.tl;\n    let count = 0;\n    if (table.headerRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const {style, name} = column;\n        const cell = r.getCell(col + j);\n        cell.value = name;\n        assignStyle(cell, style);\n      });\n    }\n    table.rows.forEach(data => {\n      const r = worksheet.getRow(row + count++);\n      data.forEach((value, j) => {\n        const cell = r.getCell(col + j);\n        cell.value = value;\n\n        assignStyle(cell, table.columns[j].style);\n      });\n    });\n\n    if (table.totalsRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const cell = r.getCell(col + j);\n        if (j === 0) {\n          cell.value = column.totalsRowLabel;\n        } else {\n          const formula = this.getFormula(column);\n          if (formula) {\n            cell.value = {\n              formula: column.totalsRowFormula,\n              result: column.totalsRowResult,\n            };\n          }\n        }\n\n        assignStyle(cell, column.style);\n      });\n    }\n  }\n\n  load(worksheet) {\n    // where the table will read necessary features from a loaded sheet\n    const {table} = this;\n    const {row, col} = table.tl;\n    let count = 0;\n    if (table.headerRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const cell = r.getCell(col + j);\n        cell.value = column.name;\n      });\n    }\n    table.rows.forEach(data => {\n      const r = worksheet.getRow(row + count++);\n      data.forEach((value, j) => {\n        const cell = r.getCell(col + j);\n        cell.value = value;\n      });\n    });\n\n    if (table.totalsRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const cell = r.getCell(col + j);\n        if (j === 0) {\n          cell.value = column.totalsRowLabel;\n        } else {\n          const formula = this.getFormula(column);\n          if (formula) {\n            cell.value = {\n              formula: column.totalsRowFormula,\n              result: column.totalsRowResult,\n            };\n          }\n        }\n      });\n    }\n  }\n\n  get model() {\n    return this.table;\n  }\n\n  set model(value) {\n    this.table = value;\n  }\n\n  // ================================================================\n  // TODO: Mutating methods\n  cacheState() {\n    if (!this._cache) {\n      this._cache = {\n        ref: this.ref,\n      };\n    }\n  }\n\n  /* eslint-disable no-unused-vars */\n  addRow(values, rowNumber) {\n    // Add a row of data, either insert at rowNumber or append\n    this.cacheState();\n  }\n\n  removeRow(rowNumber) {\n    // Remove a row of data\n    this.cacheState();\n  }\n\n  addColumn(column, values, colNumber) {\n    // Add a new column, including column defn and values\n    // Inserts at colNumber or adds to the right\n    this.cacheState();\n  }\n\n  removeColumn(colNumber) {\n    // Remove a column with data\n    this.cacheState();\n  }\n\n  assign(target, prop, value) {\n    this.cacheState();\n    target[prop] = value;\n  }\n\n  /* eslint-disable lines-between-class-members */\n  get ref() { return this.table.ref; }\n  set ref(value) { this.assign(this.table, 'ref', value); }\n\n  get name() { return this.table.name; }\n  set name(value) { this.table.name = value; }\n\n  get displayName() { return this.table.displyName || this.table.name; }\n  set displayNamename(value) { this.table.displayName = value; }\n\n  get headerRow() { return this.table.headerRow; }\n  set headerRow(value) { this.assign(this.table, 'headerRow', value); }\n\n  get totalsRow() { return this.table.totalsRow; }\n  set totalsRow(value) { this.assign(this.table, 'totalsRow', value); }\n\n  get theme() { return this.table.style.name; }\n  set theme(value) { this.table.style.name = value; }\n\n  get showFirstColumn() { return this.table.style.showFirstColumn; }\n  set showFirstColumn(value) { this.table.style.showFirstColumn = value; }\n\n  get showLastColumn() { return this.table.style.showLastColumn; }\n  set showLastColumn(value) { this.table.style.showLastColumn = value; }\n\n  get showRowStripes() { return this.table.style.showRowStripes; }\n  set showRowStripes(value) { this.table.style.showRowStripes = value; }\n\n  get showColumnStripes() { return this.table.style.showColumnStripes; }\n  set showColumnStripes(value) { this.table.style.showColumnStripes = value; }\n\n}\n\nmodule.exports = Table;\n"],"file":"table.js"}